const fs = require("fs")
const path = require("path")
const progress = require("progress")
const rimraf = require("rimraf")
const toml = require("@iarna/toml")

const log = require("../../../log")

const pullSetup = require("./pullSetup")
const dependHandler = require("./dependHandler")

const LOCK_PREFIX =
	"# This file is automatically @generated by kayak." +
	"\n# It is not intended for manual editing.\n"

module.exports = (cd, rootPackage, dependencyRoot, index) => {
	let lock = []

	const total = Object.keys(rootPackage.dependencies).length
	log.notice(`Pulling ${total} ${total == 1 ? "Dependency" : "Dependencies"}`)

	const bar = new progress("  downloading [:bar] :rate/s :percent :etas", { total: total + 1 })
	bar.tick()

	/**
	 * @todo would be nice to have process.on exit, but it doesn't work :(
	 * that way, we could erase the temporary directories on exit
	 */

	let successCount = 0
	for (d in rootPackage.dependencies) {
		const dependency = rootPackage.dependencies[d]
		const pullData = pullSetup(d, dependency, dependencyRoot, index)
		const pack = dependHandler(dependencyRoot, pullData)
		if (pack !== false) {
			successCount++
			lock.push(pack)
		}

		bar.tick()
	}

	const lockFileObject = {
		lockfile_format_version: 0,
		package: lock,
	}

	const lockFile = toml.stringify(lockFileObject)

	fs.writeFileSync(path.join(cd, "kayak.lock.toml"), LOCK_PREFIX + lockFile)

	log.success(
		`Successfully pulled ${successCount} ${successCount == 1 ? "Dependency" : "Dependencies"}.`
	)
}
