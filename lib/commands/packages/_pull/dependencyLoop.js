const fs = require("fs")
const path = require("path")
const progress = require("progress")
const rimraf = require("rimraf")
const toml = require("@iarna/toml")

const log = require("../../../log")

const pullSetup = require("./pullSetup")
const dependHandler = require("./dependHandler")

const LOCK_PREFIX =
	"# This file is automatically @generated by kayak." +
	"\n# It is not intended for manual editing.\n"

function processUrl(url) {
	console.log(1, url)
	url = url.replace(/\/$/, "")

	console.log(2, url)

	if (!/^(?:f|ht)tps?\:\/\//.test(url)) {
		url = "https://" + url
		console.log(3, url)
	}

	if (!/\.[.git]+$/i.test(url)) {
		url = url + ".git"
		console.log(4, url)
	}

	/**
	 * this is really hacky, but so is this entire project
	 * cuts off the '@ver'
	 */
	url = url.replace(/@.*./, "")

	console.log(5, url)

	return url
}

module.exports = (cd, rootPackage, dependencyRoot, index) => {
	let lock = []
	let seen = {}

	const total = Object.keys(rootPackage.dependencies).length
	log.notice(`Pulling ${total} ${total == 1 ? "Dependency" : "Dependencies"}`)

	const bar = new progress("  downloading [:bar] :rate/s :percent :etas", { total: total + 1 })
	bar.tick()

	/**
	 * @todo would be nice to have process.on exit, but it doesn't work :(
	 * that way, we could erase the temporary directories on exit
	 */

	let successCount = 0

	function loop(d, dependency, root, isSubDependency = false) {
		const wasSeen = seen[typeof dependency == "string" ? dependency : dependency.git]
		const pullData = wasSeen || pullSetup(d, dependency, root, index)

		if (!wasSeen && pullData) {
			seen[processUrl(typeof dependency == "string" ? dependency : dependency.git)] = pullData
		}

		if (pullData) {
			const pack = dependHandler(root, pullData, loop, isSubDependency)
			if (pack !== false) {
				successCount++
				lock.push(pack)
			}

			bar.tick()
		}
	}

	for (d in rootPackage.dependencies) {
		loop(d, rootPackage.dependencies[d], dependencyRoot, false)
	}

	const lockFileObject = {
		lockfile_format_version: 0,
		package: lock,
	}

	const lockFile = toml.stringify(lockFileObject)

	fs.writeFileSync(path.join(cd, "kayak.lock.toml"), LOCK_PREFIX + lockFile)

	log.success(
		`Successfully pulled ${successCount} ${successCount == 1 ? "Dependency" : "Dependencies"}.`
	)
}
